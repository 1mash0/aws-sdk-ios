{"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorUnknown":{"name":"AWSSimpleDBErrorUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorAttributeDoesNotExist":{"name":"AWSSimpleDBErrorAttributeDoesNotExist","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorDuplicateItemName":{"name":"AWSSimpleDBErrorDuplicateItemName","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorInvalidNextToken":{"name":"AWSSimpleDBErrorInvalidNextToken","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorInvalidNumberPredicates":{"name":"AWSSimpleDBErrorInvalidNumberPredicates","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorInvalidNumberValueTests":{"name":"AWSSimpleDBErrorInvalidNumberValueTests","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorInvalidParameterValue":{"name":"AWSSimpleDBErrorInvalidParameterValue","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorInvalidQueryExpression":{"name":"AWSSimpleDBErrorInvalidQueryExpression","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorMissingParameter":{"name":"AWSSimpleDBErrorMissingParameter","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorNoSuchDomain":{"name":"AWSSimpleDBErrorNoSuchDomain","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorNumberDomainAttributesExceeded":{"name":"AWSSimpleDBErrorNumberDomainAttributesExceeded","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorNumberDomainBytesExceeded":{"name":"AWSSimpleDBErrorNumberDomainBytesExceeded","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorNumberDomainsExceeded":{"name":"AWSSimpleDBErrorNumberDomainsExceeded","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorNumberItemAttributesExceeded":{"name":"AWSSimpleDBErrorNumberItemAttributesExceeded","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorNumberSubmittedAttributesExceeded":{"name":"AWSSimpleDBErrorNumberSubmittedAttributesExceeded","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorNumberSubmittedItemsExceeded":{"name":"AWSSimpleDBErrorNumberSubmittedItemsExceeded","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorRequestTimeout":{"name":"AWSSimpleDBErrorRequestTimeout","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html#/c:@E@AWSSimpleDBErrorType@AWSSimpleDBErrorTooManyRequestedAttributes":{"name":"AWSSimpleDBErrorTooManyRequestedAttributes","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBErrorType"},"Enums/AWSSimpleDBErrorType.html":{"name":"AWSSimpleDBErrorType","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSSimpleDBVersionNumber":{"name":"AWSSimpleDBVersionNumber","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSSimpleDBVersionString":{"name":"AWSSimpleDBVersionString","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSSimpleDBErrorDomain":{"name":"AWSSimpleDBErrorDomain","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSSimpleDBSDKVersion":{"name":"AWSSimpleDBSDKVersion","abstract":"<p>Undocumented</p>"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(py)configuration":{"name":"configuration","abstract":"<p>The service configuration used to instantiate this service client.</p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(cm)defaultSimpleDB":{"name":"+defaultSimpleDB","abstract":"<p>Returns the singleton service client. If the singleton object does not exist, the SDK instantiates the default service client with <code>defaultServiceConfiguration</code> from <code>[AWSServiceManager defaultServiceManager]</code>. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(cm)registerSimpleDBWithConfiguration:forKey:":{"name":"+registerSimpleDBWithConfiguration:forKey:","abstract":"<p>Creates a service client with the given service configuration and registers it for the key.</p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(cm)SimpleDBForKey:":{"name":"+SimpleDBForKey:","abstract":"<p>Retrieves the service client associated with the key. You need to call <code>+ registerSimpleDBWithConfiguration:forKey:</code> before invoking this method.</p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(cm)removeSimpleDBForKey:":{"name":"+removeSimpleDBForKey:","abstract":"<p>Removes the service client associated with the key and release it.</p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)batchDeleteAttributes:":{"name":"-batchDeleteAttributes:","abstract":"<p> Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. </p><p> The following limitations are enforced for this operation: <ul><li>1 MB request size</li><li>25 item limit per BatchDeleteAttributes operation</li></ul></p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)batchDeleteAttributes:completionHandler:":{"name":"-batchDeleteAttributes:completionHandler:","abstract":"<p> Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. </p><p> The following limitations are enforced for this operation: <ul><li>1 MB request size</li><li>25 item limit per BatchDeleteAttributes operation</li></ul></p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)batchPutAttributes:":{"name":"-batchPutAttributes:","abstract":"<p> The <code>BatchPutAttributes</code> operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a> operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. </p><p> The client may specify the item name with the <code>Item.X.ItemName</code> parameter. The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code> and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>, and so on. </p><p> Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes <code>{ \"first_name\", \"first_value\" }</code> and <code>{ \"first_name\", \"second_value\" }</code>. However, it cannot have two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> are the same. </p><p> Optionally, the requester can supply the <code>Replace</code> parameter for each individual value. Setting this value to <code>true</code> will cause the new attribute values to replace the existing attribute values. For example, if an item <code>I</code> has the attributes <code>{ 'a', '1' }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requester does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with the Replace parameter set to true, the final attributes of the item will be <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the previous values of the &lsquo;b&rsquo; attribute with the new value. </p><important> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>. </important><p> You can execute multiple <code>BatchPutAttributes</code> operations and other operations in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code> calls can result in Service Unavailable (503) responses. </p><p> The following limitations are enforced for this operation: <ul><li>256 attribute name-value pairs per item</li><li>1 MB request size</li><li>1 billion attributes per domain</li><li>10 GB of total user data storage per domain</li><li>25 item limit per <code>BatchPutAttributes</code> operation</li></ul></p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)batchPutAttributes:completionHandler:":{"name":"-batchPutAttributes:completionHandler:","abstract":"<p> The <code>BatchPutAttributes</code> operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a> operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. </p><p> The client may specify the item name with the <code>Item.X.ItemName</code> parameter. The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code> and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>, and so on. </p><p> Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes <code>{ \"first_name\", \"first_value\" }</code> and <code>{ \"first_name\", \"second_value\" }</code>. However, it cannot have two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> are the same. </p><p> Optionally, the requester can supply the <code>Replace</code> parameter for each individual value. Setting this value to <code>true</code> will cause the new attribute values to replace the existing attribute values. For example, if an item <code>I</code> has the attributes <code>{ 'a', '1' }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requester does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with the Replace parameter set to true, the final attributes of the item will be <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the previous values of the &lsquo;b&rsquo; attribute with the new value. </p><important> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>. </important><p> You can execute multiple <code>BatchPutAttributes</code> operations and other operations in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code> calls can result in Service Unavailable (503) responses. </p><p> The following limitations are enforced for this operation: <ul><li>256 attribute name-value pairs per item</li><li>1 MB request size</li><li>1 billion attributes per domain</li><li>10 GB of total user data storage per domain</li><li>25 item limit per <code>BatchPutAttributes</code> operation</li></ul></p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)createDomain:":{"name":"-createDomain:","abstract":"<p> The <code>CreateDomain</code> operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The <code>CreateDomain</code> operation may take 10 or more seconds to complete. </p><p> The client can create up to 100 domains per account. </p><p> If the client requires additional domains, go to <a href=\"http://aws.amazon.com/contact-us/simpledb-limit-request/\"> http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)createDomain:completionHandler:":{"name":"-createDomain:completionHandler:","abstract":"<p> The <code>CreateDomain</code> operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The <code>CreateDomain</code> operation may take 10 or more seconds to complete. </p><p> The client can create up to 100 domains per account. </p><p> If the client requires additional domains, go to <a href=\"http://aws.amazon.com/contact-us/simpledb-limit-request/\"> http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)deleteAttributes:":{"name":"-deleteAttributes:","abstract":"<p> Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. </p><p><code>DeleteAttributes</code> is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. </p><p> Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation (write) might not return updated item data. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)deleteAttributes:completionHandler:":{"name":"-deleteAttributes:completionHandler:","abstract":"<p> Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. </p><p><code>DeleteAttributes</code> is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. </p><p> Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation (write) might not return updated item data. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)deleteDomain:":{"name":"-deleteDomain:","abstract":"<p> The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The <code>DeleteDomain</code> operation might take 10 or more seconds to complete. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)deleteDomain:completionHandler:":{"name":"-deleteDomain:completionHandler:","abstract":"<p> The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The <code>DeleteDomain</code> operation might take 10 or more seconds to complete. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)domainMetadata:":{"name":"-domainMetadata:","abstract":"<p> Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)domainMetadata:completionHandler:":{"name":"-domainMetadata:completionHandler:","abstract":"<p> Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)getAttributes:":{"name":"-getAttributes:","abstract":"<p> Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. </p><p> If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)getAttributes:completionHandler:":{"name":"-getAttributes:completionHandler:","abstract":"<p> Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. </p><p> If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)listDomains:":{"name":"-listDomains:","abstract":"<p> The <code>ListDomains</code> operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by <a href=\"#MaxNumberOfDomains\">MaxNumberOfDomains</a>. A <a href=\"#NextToken\">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code> domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code> provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain names with each successive operation call. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)listDomains:completionHandler:":{"name":"-listDomains:completionHandler:","abstract":"<p> The <code>ListDomains</code> operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by <a href=\"#MaxNumberOfDomains\">MaxNumberOfDomains</a>. A <a href=\"#NextToken\">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code> domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code> provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain names with each successive operation call. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)putAttributes:":{"name":"-putAttributes:","abstract":"<p> The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>, the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>, and so on. </p><p> Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes <code>{ \"first_name\", \"first_value\" }</code> and <code>{ \"first_name\", second_value\" }</code>. However, it cannot have two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> are the same. </p><p> Optionally, the requestor can supply the <code>Replace</code> parameter for each individual attribute. Setting this value to <code>true</code> causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{ 'b', '4' }</code> with the <code>Replace</code> parameter set to true, the final attributes of the item are changed to <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, which replaces the previous values of the &lsquo;b&rsquo; attribute with the new value. </p><p> You cannot specify an empty string as an attribute name. </p><p> Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation (write) might not return the updated data. </p><p> The following limitations are enforced for this operation: <ul><li>256 total attribute name-value pairs per item</li><li>One billion attributes per domain</li><li>10 GB of total user data storage per domain</li></ul></p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)putAttributes:completionHandler:":{"name":"-putAttributes:completionHandler:","abstract":"<p> The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>, the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>, and so on. </p><p> Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes <code>{ \"first_name\", \"first_value\" }</code> and <code>{ \"first_name\", second_value\" }</code>. However, it cannot have two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> are the same. </p><p> Optionally, the requestor can supply the <code>Replace</code> parameter for each individual attribute. Setting this value to <code>true</code> causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{ 'b', '4' }</code> with the <code>Replace</code> parameter set to true, the final attributes of the item are changed to <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, which replaces the previous values of the &lsquo;b&rsquo; attribute with the new value. </p><p> You cannot specify an empty string as an attribute name. </p><p> Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation (write) might not return the updated data. </p><p> The following limitations are enforced for this operation: <ul><li>256 total attribute name-value pairs per item</li><li>One billion attributes per domain</li><li>10 GB of total user data storage per domain</li></ul></p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)select:":{"name":"-select:","abstract":"<p> The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code> that match the select expression. <code>Select</code> is similar to the standard SQL SELECT statement. </p><p> The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code> so the client can access the next page of results. </p><p> For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDB.html#/c:objc(cs)AWSSimpleDB(im)select:completionHandler:":{"name":"-select:completionHandler:","abstract":"<p> The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code> that match the select expression. <code>Select</code> is similar to the standard SQL SELECT statement. </p><p> The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code> so the client can access the next page of results. </p><p> For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. </p>","parent_name":"AWSSimpleDB"},"Classes/AWSSimpleDBResources.html#/c:objc(cs)AWSSimpleDBResources(cm)sharedInstance":{"name":"+sharedInstance","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBResources"},"Classes/AWSSimpleDBResources.html#/c:objc(cs)AWSSimpleDBResources(im)JSONObject":{"name":"-JSONObject","abstract":"<p>Undocumented</p>","parent_name":"AWSSimpleDBResources"},"Classes/AWSSimpleDBUpdateCondition.html#/c:objc(cs)AWSSimpleDBUpdateCondition(py)exists":{"name":"exists","abstract":"<p>A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.</p>","parent_name":"AWSSimpleDBUpdateCondition"},"Classes/AWSSimpleDBUpdateCondition.html#/c:objc(cs)AWSSimpleDBUpdateCondition(py)name":{"name":"name","abstract":"<p>The name of the attribute involved in the condition.</p>","parent_name":"AWSSimpleDBUpdateCondition"},"Classes/AWSSimpleDBUpdateCondition.html#/c:objc(cs)AWSSimpleDBUpdateCondition(py)value":{"name":"value","abstract":"<p>The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.</p>","parent_name":"AWSSimpleDBUpdateCondition"},"Classes/AWSSimpleDBSelectResult.html#/c:objc(cs)AWSSimpleDBSelectResult(py)items":{"name":"items","abstract":"<p>A list of items that match the select expression.</p>","parent_name":"AWSSimpleDBSelectResult"},"Classes/AWSSimpleDBSelectResult.html#/c:objc(cs)AWSSimpleDBSelectResult(py)nextToken":{"name":"nextToken","abstract":"<p>An opaque token indicating that more items than <code>MaxNumberOfItems</code> were matched, the response size exceeded 1 megabyte, or the execution time exceeded 5 seconds.</p>","parent_name":"AWSSimpleDBSelectResult"},"Classes/AWSSimpleDBSelectRequest.html#/c:objc(cs)AWSSimpleDBSelectRequest(py)consistentRead":{"name":"consistentRead","abstract":"<p>Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.</p>","parent_name":"AWSSimpleDBSelectRequest"},"Classes/AWSSimpleDBSelectRequest.html#/c:objc(cs)AWSSimpleDBSelectRequest(py)nextToken":{"name":"nextToken","abstract":"<p>A string informing Amazon SimpleDB where to start the next list of <code>ItemNames</code>.</p>","parent_name":"AWSSimpleDBSelectRequest"},"Classes/AWSSimpleDBSelectRequest.html#/c:objc(cs)AWSSimpleDBSelectRequest(py)selectExpression":{"name":"selectExpression","abstract":"<p>The expression used to query the domain.</p>","parent_name":"AWSSimpleDBSelectRequest"},"Classes/AWSSimpleDBReplaceableItem.html#/c:objc(cs)AWSSimpleDBReplaceableItem(py)attributes":{"name":"attributes","abstract":"<p>The list of attributes for a replaceable item.</p>","parent_name":"AWSSimpleDBReplaceableItem"},"Classes/AWSSimpleDBReplaceableItem.html#/c:objc(cs)AWSSimpleDBReplaceableItem(py)name":{"name":"name","abstract":"<p>The name of the replaceable item.</p>","parent_name":"AWSSimpleDBReplaceableItem"},"Classes/AWSSimpleDBReplaceableAttribute.html#/c:objc(cs)AWSSimpleDBReplaceableAttribute(py)name":{"name":"name","abstract":"<p>The name of the replaceable attribute.</p>","parent_name":"AWSSimpleDBReplaceableAttribute"},"Classes/AWSSimpleDBReplaceableAttribute.html#/c:objc(cs)AWSSimpleDBReplaceableAttribute(py)replace":{"name":"replace","abstract":"<p>A flag specifying whether or not to replace the attribute/value pair or to add a new attribute/value pair. The default setting is <code>false</code>.</p>","parent_name":"AWSSimpleDBReplaceableAttribute"},"Classes/AWSSimpleDBReplaceableAttribute.html#/c:objc(cs)AWSSimpleDBReplaceableAttribute(py)value":{"name":"value","abstract":"<p>The value of the replaceable attribute.</p>","parent_name":"AWSSimpleDBReplaceableAttribute"},"Classes/AWSSimpleDBPutAttributesRequest.html#/c:objc(cs)AWSSimpleDBPutAttributesRequest(py)attributes":{"name":"attributes","abstract":"<p>The list of attributes.</p>","parent_name":"AWSSimpleDBPutAttributesRequest"},"Classes/AWSSimpleDBPutAttributesRequest.html#/c:objc(cs)AWSSimpleDBPutAttributesRequest(py)domainName":{"name":"domainName","abstract":"<p>The name of the domain in which to perform the operation.</p>","parent_name":"AWSSimpleDBPutAttributesRequest"},"Classes/AWSSimpleDBPutAttributesRequest.html#/c:objc(cs)AWSSimpleDBPutAttributesRequest(py)expected":{"name":"expected","abstract":"<p>The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.</p>","parent_name":"AWSSimpleDBPutAttributesRequest"},"Classes/AWSSimpleDBPutAttributesRequest.html#/c:objc(cs)AWSSimpleDBPutAttributesRequest(py)itemName":{"name":"itemName","abstract":"<p>The name of the item.</p>","parent_name":"AWSSimpleDBPutAttributesRequest"},"Classes/AWSSimpleDBListDomainsResult.html#/c:objc(cs)AWSSimpleDBListDomainsResult(py)domainNames":{"name":"domainNames","abstract":"<p>A list of domain names that match the expression.</p>","parent_name":"AWSSimpleDBListDomainsResult"},"Classes/AWSSimpleDBListDomainsResult.html#/c:objc(cs)AWSSimpleDBListDomainsResult(py)nextToken":{"name":"nextToken","abstract":"<p>An opaque token indicating that there are more domains than the specified <code>MaxNumberOfDomains</code> still available.</p>","parent_name":"AWSSimpleDBListDomainsResult"},"Classes/AWSSimpleDBListDomainsRequest.html#/c:objc(cs)AWSSimpleDBListDomainsRequest(py)maxNumberOfDomains":{"name":"maxNumberOfDomains","abstract":"<p>The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.</p>","parent_name":"AWSSimpleDBListDomainsRequest"},"Classes/AWSSimpleDBListDomainsRequest.html#/c:objc(cs)AWSSimpleDBListDomainsRequest(py)nextToken":{"name":"nextToken","abstract":"<p>A string informing Amazon SimpleDB where to start the next list of domain names.</p>","parent_name":"AWSSimpleDBListDomainsRequest"},"Classes/AWSSimpleDBItem.html#/c:objc(cs)AWSSimpleDBItem(py)alternateNameEncoding":{"name":"alternateNameEncoding","abstract":"<p></p>","parent_name":"AWSSimpleDBItem"},"Classes/AWSSimpleDBItem.html#/c:objc(cs)AWSSimpleDBItem(py)attributes":{"name":"attributes","abstract":"<p>A list of attributes.</p>","parent_name":"AWSSimpleDBItem"},"Classes/AWSSimpleDBItem.html#/c:objc(cs)AWSSimpleDBItem(py)name":{"name":"name","abstract":"<p>The name of the item.</p>","parent_name":"AWSSimpleDBItem"},"Classes/AWSSimpleDBGetAttributesResult.html#/c:objc(cs)AWSSimpleDBGetAttributesResult(py)attributes":{"name":"attributes","abstract":"<p>The list of attributes returned by the operation.</p>","parent_name":"AWSSimpleDBGetAttributesResult"},"Classes/AWSSimpleDBGetAttributesRequest.html#/c:objc(cs)AWSSimpleDBGetAttributesRequest(py)attributeNames":{"name":"attributeNames","abstract":"<p>The names of the attributes.</p>","parent_name":"AWSSimpleDBGetAttributesRequest"},"Classes/AWSSimpleDBGetAttributesRequest.html#/c:objc(cs)AWSSimpleDBGetAttributesRequest(py)consistentRead":{"name":"consistentRead","abstract":"<p>Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.</p>","parent_name":"AWSSimpleDBGetAttributesRequest"},"Classes/AWSSimpleDBGetAttributesRequest.html#/c:objc(cs)AWSSimpleDBGetAttributesRequest(py)domainName":{"name":"domainName","abstract":"<p>The name of the domain in which to perform the operation.</p>","parent_name":"AWSSimpleDBGetAttributesRequest"},"Classes/AWSSimpleDBGetAttributesRequest.html#/c:objc(cs)AWSSimpleDBGetAttributesRequest(py)itemName":{"name":"itemName","abstract":"<p>The name of the item.</p>","parent_name":"AWSSimpleDBGetAttributesRequest"},"Classes/AWSSimpleDBDomainMetadataResult.html#/c:objc(cs)AWSSimpleDBDomainMetadataResult(py)attributeNameCount":{"name":"attributeNameCount","abstract":"<p>The number of unique attribute names in the domain.</p>","parent_name":"AWSSimpleDBDomainMetadataResult"},"Classes/AWSSimpleDBDomainMetadataResult.html#/c:objc(cs)AWSSimpleDBDomainMetadataResult(py)attributeNamesSizeBytes":{"name":"attributeNamesSizeBytes","abstract":"<p>The total size of all unique attribute names in the domain, in bytes.</p>","parent_name":"AWSSimpleDBDomainMetadataResult"},"Classes/AWSSimpleDBDomainMetadataResult.html#/c:objc(cs)AWSSimpleDBDomainMetadataResult(py)attributeValueCount":{"name":"attributeValueCount","abstract":"<p>The number of all attribute name/value pairs in the domain.</p>","parent_name":"AWSSimpleDBDomainMetadataResult"},"Classes/AWSSimpleDBDomainMetadataResult.html#/c:objc(cs)AWSSimpleDBDomainMetadataResult(py)attributeValuesSizeBytes":{"name":"attributeValuesSizeBytes","abstract":"<p>The total size of all attribute values in the domain, in bytes.</p>","parent_name":"AWSSimpleDBDomainMetadataResult"},"Classes/AWSSimpleDBDomainMetadataResult.html#/c:objc(cs)AWSSimpleDBDomainMetadataResult(py)itemCount":{"name":"itemCount","abstract":"<p>The number of all items in the domain.</p>","parent_name":"AWSSimpleDBDomainMetadataResult"},"Classes/AWSSimpleDBDomainMetadataResult.html#/c:objc(cs)AWSSimpleDBDomainMetadataResult(py)itemNamesSizeBytes":{"name":"itemNamesSizeBytes","abstract":"<p>The total size of all item names in the domain, in bytes.</p>","parent_name":"AWSSimpleDBDomainMetadataResult"},"Classes/AWSSimpleDBDomainMetadataResult.html#/c:objc(cs)AWSSimpleDBDomainMetadataResult(py)timestamp":{"name":"timestamp","abstract":"<p>The data and time when metadata was calculated, in Epoch (UNIX) seconds.</p>","parent_name":"AWSSimpleDBDomainMetadataResult"},"Classes/AWSSimpleDBDomainMetadataRequest.html#/c:objc(cs)AWSSimpleDBDomainMetadataRequest(py)domainName":{"name":"domainName","abstract":"<p>The name of the domain for which to display the metadata of.</p>","parent_name":"AWSSimpleDBDomainMetadataRequest"},"Classes/AWSSimpleDBDeleteDomainRequest.html#/c:objc(cs)AWSSimpleDBDeleteDomainRequest(py)domainName":{"name":"domainName","abstract":"<p>The name of the domain to delete.</p>","parent_name":"AWSSimpleDBDeleteDomainRequest"},"Classes/AWSSimpleDBDeleteAttributesRequest.html#/c:objc(cs)AWSSimpleDBDeleteAttributesRequest(py)attributes":{"name":"attributes","abstract":"<p>A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.</p>","parent_name":"AWSSimpleDBDeleteAttributesRequest"},"Classes/AWSSimpleDBDeleteAttributesRequest.html#/c:objc(cs)AWSSimpleDBDeleteAttributesRequest(py)domainName":{"name":"domainName","abstract":"<p>The name of the domain in which to perform the operation.</p>","parent_name":"AWSSimpleDBDeleteAttributesRequest"},"Classes/AWSSimpleDBDeleteAttributesRequest.html#/c:objc(cs)AWSSimpleDBDeleteAttributesRequest(py)expected":{"name":"expected","abstract":"<p>The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.</p>","parent_name":"AWSSimpleDBDeleteAttributesRequest"},"Classes/AWSSimpleDBDeleteAttributesRequest.html#/c:objc(cs)AWSSimpleDBDeleteAttributesRequest(py)itemName":{"name":"itemName","abstract":"<p>The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.</p>","parent_name":"AWSSimpleDBDeleteAttributesRequest"},"Classes/AWSSimpleDBDeletableItem.html#/c:objc(cs)AWSSimpleDBDeletableItem(py)attributes":{"name":"attributes","parent_name":"AWSSimpleDBDeletableItem"},"Classes/AWSSimpleDBDeletableItem.html#/c:objc(cs)AWSSimpleDBDeletableItem(py)name":{"name":"name","parent_name":"AWSSimpleDBDeletableItem"},"Classes/AWSSimpleDBCreateDomainRequest.html#/c:objc(cs)AWSSimpleDBCreateDomainRequest(py)domainName":{"name":"domainName","abstract":"<p>The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, &lsquo;_&rsquo;, &lsquo;-&rsquo;, and &lsquo;.&rsquo;.</p>","parent_name":"AWSSimpleDBCreateDomainRequest"},"Classes/AWSSimpleDBBatchPutAttributesRequest.html#/c:objc(cs)AWSSimpleDBBatchPutAttributesRequest(py)domainName":{"name":"domainName","abstract":"<p>The name of the domain in which the attributes are being stored.</p>","parent_name":"AWSSimpleDBBatchPutAttributesRequest"},"Classes/AWSSimpleDBBatchPutAttributesRequest.html#/c:objc(cs)AWSSimpleDBBatchPutAttributesRequest(py)items":{"name":"items","abstract":"<p>A list of items on which to perform the operation.</p>","parent_name":"AWSSimpleDBBatchPutAttributesRequest"},"Classes/AWSSimpleDBBatchDeleteAttributesRequest.html#/c:objc(cs)AWSSimpleDBBatchDeleteAttributesRequest(py)domainName":{"name":"domainName","abstract":"<p>The name of the domain in which the attributes are being deleted.</p>","parent_name":"AWSSimpleDBBatchDeleteAttributesRequest"},"Classes/AWSSimpleDBBatchDeleteAttributesRequest.html#/c:objc(cs)AWSSimpleDBBatchDeleteAttributesRequest(py)items":{"name":"items","abstract":"<p>A list of items on which to perform the operation.</p>","parent_name":"AWSSimpleDBBatchDeleteAttributesRequest"},"Classes/AWSSimpleDBAttribute.html#/c:objc(cs)AWSSimpleDBAttribute(py)alternateNameEncoding":{"name":"alternateNameEncoding","abstract":"<p></p>","parent_name":"AWSSimpleDBAttribute"},"Classes/AWSSimpleDBAttribute.html#/c:objc(cs)AWSSimpleDBAttribute(py)alternateValueEncoding":{"name":"alternateValueEncoding","abstract":"<p></p>","parent_name":"AWSSimpleDBAttribute"},"Classes/AWSSimpleDBAttribute.html#/c:objc(cs)AWSSimpleDBAttribute(py)name":{"name":"name","abstract":"<p>The name of the attribute.</p>","parent_name":"AWSSimpleDBAttribute"},"Classes/AWSSimpleDBAttribute.html#/c:objc(cs)AWSSimpleDBAttribute(py)value":{"name":"value","abstract":"<p>The value of the attribute.</p>","parent_name":"AWSSimpleDBAttribute"},"Classes/AWSSimpleDBAttribute.html":{"name":"AWSSimpleDBAttribute","abstract":"<p></p>"},"Classes/AWSSimpleDBBatchDeleteAttributesRequest.html":{"name":"AWSSimpleDBBatchDeleteAttributesRequest"},"Classes/AWSSimpleDBBatchPutAttributesRequest.html":{"name":"AWSSimpleDBBatchPutAttributesRequest"},"Classes/AWSSimpleDBCreateDomainRequest.html":{"name":"AWSSimpleDBCreateDomainRequest"},"Classes/AWSSimpleDBDeletableItem.html":{"name":"AWSSimpleDBDeletableItem"},"Classes/AWSSimpleDBDeleteAttributesRequest.html":{"name":"AWSSimpleDBDeleteAttributesRequest"},"Classes/AWSSimpleDBDeleteDomainRequest.html":{"name":"AWSSimpleDBDeleteDomainRequest"},"Classes/AWSSimpleDBDomainMetadataRequest.html":{"name":"AWSSimpleDBDomainMetadataRequest"},"Classes/AWSSimpleDBDomainMetadataResult.html":{"name":"AWSSimpleDBDomainMetadataResult"},"Classes/AWSSimpleDBGetAttributesRequest.html":{"name":"AWSSimpleDBGetAttributesRequest"},"Classes/AWSSimpleDBGetAttributesResult.html":{"name":"AWSSimpleDBGetAttributesResult"},"Classes/AWSSimpleDBItem.html":{"name":"AWSSimpleDBItem","abstract":"<p></p>"},"Classes/AWSSimpleDBListDomainsRequest.html":{"name":"AWSSimpleDBListDomainsRequest"},"Classes/AWSSimpleDBListDomainsResult.html":{"name":"AWSSimpleDBListDomainsResult"},"Classes/AWSSimpleDBPutAttributesRequest.html":{"name":"AWSSimpleDBPutAttributesRequest"},"Classes/AWSSimpleDBReplaceableAttribute.html":{"name":"AWSSimpleDBReplaceableAttribute","abstract":"<p></p>"},"Classes/AWSSimpleDBReplaceableItem.html":{"name":"AWSSimpleDBReplaceableItem","abstract":"<p></p>"},"Classes/AWSSimpleDBSelectRequest.html":{"name":"AWSSimpleDBSelectRequest"},"Classes/AWSSimpleDBSelectResult.html":{"name":"AWSSimpleDBSelectResult"},"Classes/AWSSimpleDBUpdateCondition.html":{"name":"AWSSimpleDBUpdateCondition","abstract":"<p> Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn&rsquo;t exist. </p>"},"Classes/AWSSimpleDBResources.html":{"name":"AWSSimpleDBResources","abstract":"<p>Undocumented</p>"},"Classes/AWSSimpleDB.html":{"name":"AWSSimpleDB","abstract":"<p>Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon&rsquo;s proven computing environment, are able to scale instantly, and pay only for what they use. </p><p> Visit <a href=\"http://aws.amazon.com/simpledb/\"><a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a></a> for more information. </p></p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Constants.html":{"name":"Constants","abstract":"<p>The following constants are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"}}